"use strict";
/**
 * Generated by the Babylon.JS Editor v4.3.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurePostProcesses = exports.motionBlurPostProcessRef = exports.defaultRenderingPipelineRef = exports.screenSpaceReflectionPostProcessRef = exports.ssao2RenderingPipelineRef = exports.attachScriptToNodeAtRuntime = exports.attachTransformNodesToBones = exports.applyMeshesPoseMatrices = exports.setupRenderingGroups = exports.applyMeshColliders = exports.attachScripts = exports.runScene = exports.appendScene = exports.configureEngine = exports.projectConfiguration = void 0;
var node_1 = require("@babylonjs/core/node");
var scene_1 = require("@babylonjs/core/scene");
var mesh_1 = require("@babylonjs/core/Meshes/mesh");
var math_color_1 = require("@babylonjs/core/Maths/math.color");
var engineStore_1 = require("@babylonjs/core/Engines/engineStore");
var sceneLoader_1 = require("@babylonjs/core/Loading/sceneLoader");
var abstractMesh_1 = require("@babylonjs/core/Meshes/abstractMesh");
var decorators_1 = require("@babylonjs/core/Misc/decorators");
var math_vector_1 = require("@babylonjs/core/Maths/math.vector");
var motionBlurPostProcess_1 = require("@babylonjs/core/PostProcesses/motionBlurPostProcess");
var screenSpaceReflectionPostProcess_1 = require("@babylonjs/core/PostProcesses/screenSpaceReflectionPostProcess");
var ssao2RenderingPipeline_1 = require("@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline");
var defaultRenderingPipeline_1 = require("@babylonjs/core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline");
require("@babylonjs/core/Audio/audioSceneComponent");
require("@babylonjs/core/Physics/physicsEngineComponent");
require("@babylonjs/core/Engines/Extensions/engine.textureSelector");
require("@babylonjs/core/Materials/Textures/Loaders/ktxTextureLoader");
exports.projectConfiguration = {
    "compressedTextures": {
        "supportedFormats": []
    }
};
/**
 * Configures the given engine according to the current project configuration (compressed textures, etc.).
 * @param engine defines the reference to the engine to configure.
 */
function configureEngine(engine) {
    if (exports.projectConfiguration.compressedTextures.supportedFormats.length) {
        engine.setTextureFormatToUse(exports.projectConfiguration.compressedTextures.supportedFormats);
    }
}
exports.configureEngine = configureEngine;
/**
 * Loads the given scene file and appends it to the given scene reference (`toScene`).
 * @param toScene defines the instance of `Scene` to append to.
 * @param rootUrl defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)
 * @param sceneFilename defines the name of the scene file.
 */
function appendScene(toScene, rootUrl, sceneFilename) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, sceneLoader_1.SceneLoader.AppendAsync(rootUrl, sceneFilename, toScene, null, ".babylon")];
                case 1:
                    _a.sent();
                    return [2 /*return*/, new Promise(function (resolve) {
                            toScene.executeWhenReady(function () {
                                runScene(toScene, rootUrl);
                                resolve();
                            });
                        })];
            }
        });
    });
}
exports.appendScene = appendScene;
/**
 * Returns wether or not the given constructor is an ES6 (or more) class.
 * @param ctor defines the reference to the constructor to test.
 * @param scene defines the reference the scene in case the tested script is a graph.
 * @returns wether or not the given constructor is
 */
function isEs6Class(ctor, scene) {
    try {
        ctor.call({}, scene, {});
        return false;
    }
    catch (e) {
        return true;
    }
}
/**
 * Requires the nedded scripts for the given nodes array and attach them.
 * @param scene defines the reference to the scene that contains the given nodes.
 * @param scriptsMap defines the map that contains the scripts constructors ordered by script path.
 * @param nodes the array of nodes to attach script (if exists).
 */
function requireScriptForNodes(scene, scriptsMap, nodes) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    var dummyScene = new scene_1.Scene(scene.getEngine(), { virtual: true });
    var initializedNodes = [];
    var engine = scene.getEngine();
    // Initialize nodes
    for (var _i = 0, _q = nodes; _i < _q.length; _i++) {
        var n = _q[_i];
        if (!n.metadata || !n.metadata.script || !n.metadata.script.name || n.metadata.script.name === "None") {
            continue;
        }
        var exports_1 = scriptsMap[n.metadata.script.name];
        if (!exports_1) {
            continue;
        }
        var scene_2 = n instanceof scene_1.Scene ? n : n.getScene();
        // Get prototype.
        var prototype = exports_1.default.prototype;
        // Call constructor
        if (isEs6Class(prototype.constructor, scene_2)) {
            var currentScene = engineStore_1.EngineStore.LastCreatedScene;
            engineStore_1.EngineStore._LastCreatedScene = dummyScene;
            var clone = exports_1.IsGraph ?
                Reflect.construct(prototype.constructor.bind(n), [scene_2, n]) :
                Reflect.construct(prototype.constructor.bind(n), []);
            Reflect.setPrototypeOf(n, clone.constructor.prototype);
            engineStore_1.EngineStore._LastCreatedScene = currentScene;
            for (var key in clone) {
                if (!Reflect.has(n, key)) {
                    n[key] = clone[key];
                }
            }
            clone.dispose();
        }
        else {
            if (exports_1.IsGraph) {
                exports_1.IsGraphAttached = true;
                prototype.constructor.call(n, scene_2, n);
            }
            else {
                prototype.constructor.call(n);
            }
            // Add prototype
            do {
                for (var key in prototype) {
                    if (!prototype.hasOwnProperty(key) || key === "constructor") {
                        continue;
                    }
                    n[key] = prototype[key].bind(n);
                }
                prototype = Object.getPrototypeOf(prototype);
            } while (((_a = prototype.constructor) === null || _a === void 0 ? void 0 : _a.IsComponent) === true);
        }
        // Call onInitialize
        (_b = n.onInitialize) === null || _b === void 0 ? void 0 : _b.call(n);
        initializedNodes.push({ node: n, exports: exports_1 });
    }
    var _loop_1 = function (i) {
        var n = i.node;
        var e = i.exports;
        var scene_3 = i.node instanceof scene_1.Scene ? i.node : i.node.getScene();
        // Check start
        if (n.onStart) {
            var startObserver_1 = scene_3.onBeforeRenderObservable.addOnce(function () {
                startObserver_1 = null;
                n.onStart();
            });
            n.onDisposeObservable.addOnce(function () {
                if (startObserver_1) {
                    scene_3.onBeforeRenderObservable.remove(startObserver_1);
                }
            });
        }
        // Check update
        if (n.onUpdate) {
            var updateObserver_1 = scene_3.onBeforeRenderObservable.add(function () { return n.onUpdate(); });
            n.onDisposeObservable.addOnce(function () { return scene_3.onBeforeRenderObservable.remove(updateObserver_1); });
        }
        // Check stop
        if (n.onStop) {
            n.onDisposeObservable.addOnce(function () { return n.onStop(); });
        }
        // Check properties
        var properties = (_c = n.metadata.script.properties) !== null && _c !== void 0 ? _c : {};
        for (var key in properties) {
            var p = properties[key];
            switch (p.type) {
                case "Vector2":
                    n[key] = new math_vector_1.Vector2(p.value.x, p.value.y);
                    break;
                case "Vector3":
                    n[key] = new math_vector_1.Vector3(p.value.x, p.value.y, p.value.z);
                    break;
                case "Vector4":
                    n[key] = new math_vector_1.Vector4(p.value.x, p.value.y, p.value.z, p.value.w);
                    break;
                case "Color3":
                    n[key] = new math_color_1.Color3(p.value.r, p.value.g, p.value.b);
                    break;
                case "Color4":
                    n[key] = new math_color_1.Color4(p.value.r, p.value.g, p.value.b, p.value.a);
                    break;
                default:
                    n[key] = p.value;
                    break;
            }
        }
        // Check linked children.
        if (n instanceof node_1.Node) {
            var childrenLinks = (_d = e.default._ChildrenValues) !== null && _d !== void 0 ? _d : [];
            var _loop_2 = function (link) {
                var child = n.getChildren((function (node) { return node.name === link.nodeName; }), true)[0];
                n[link.propertyKey] = child;
            };
            for (var _s = 0, childrenLinks_1 = childrenLinks; _s < childrenLinks_1.length; _s++) {
                var link = childrenLinks_1[_s];
                _loop_2(link);
            }
        }
        // Check linked nodes from scene.
        var sceneLinks = (_e = e.default._SceneValues) !== null && _e !== void 0 ? _e : [];
        for (var _t = 0, sceneLinks_1 = sceneLinks; _t < sceneLinks_1.length; _t++) {
            var link = sceneLinks_1[_t];
            var node = scene_3.getNodeByName(link.nodeName);
            n[link.propertyKey] = node;
        }
        // Check particle systems
        var particleSystemLinks = (_f = e.default._ParticleSystemValues) !== null && _f !== void 0 ? _f : [];
        var _loop_3 = function (link) {
            var ps = scene_3.particleSystems.find(function (ps) { return ps.name === link.particleSystemName; });
            n[link.propertyKey] = ps;
        };
        for (var _u = 0, particleSystemLinks_1 = particleSystemLinks; _u < particleSystemLinks_1.length; _u++) {
            var link = particleSystemLinks_1[_u];
            _loop_3(link);
        }
        // Check animation groups
        var animationGroupLinks = (_g = e.default._AnimationGroupValues) !== null && _g !== void 0 ? _g : [];
        for (var _v = 0, animationGroupLinks_1 = animationGroupLinks; _v < animationGroupLinks_1.length; _v++) {
            var link = animationGroupLinks_1[_v];
            var ag = scene_3.getAnimationGroupByName(link.animationGroupName);
            n[link.propertyKey] = ag;
        }
        // Sounds
        var soundLinks = (_h = e.default._SoundValues) !== null && _h !== void 0 ? _h : [];
        var _loop_4 = function (link) {
            switch (link.type) {
                case "global":
                    n[link.propertyKey] = scene_3.mainSoundTrack.soundCollection.find(function (s) { return s.name === link.soundName && !s.spatialSound; });
                    break;
                case "spatial":
                    n[link.propertyKey] = scene_3.mainSoundTrack.soundCollection.find(function (s) { return s.name === link.soundName && s.spatialSound; });
                    break;
                default:
                    n[link.propertyKey] = scene_3.getSoundByName(link.soundName);
                    break;
            }
        };
        for (var _w = 0, soundLinks_1 = soundLinks; _w < soundLinks_1.length; _w++) {
            var link = soundLinks_1[_w];
            _loop_4(link);
        }
        // Materials
        var materialLinks = (_j = e.default._MaterialsValues) !== null && _j !== void 0 ? _j : [];
        for (var _x = 0, materialLinks_1 = materialLinks; _x < materialLinks_1.length; _x++) {
            var link = materialLinks_1[_x];
            var m = scene_3.getMaterialByName(link.nodeName);
            n[link.propertyKey] = m;
        }
        // Check pointer events
        var pointerEvents = (_k = e.default._PointerValues) !== null && _k !== void 0 ? _k : [];
        var _loop_5 = function (event_1) {
            var observer = scene_3.onPointerObservable.add(function (e) {
                var _a;
                if (e.type !== event_1.type) {
                    return;
                }
                if (!event_1.onlyWhenMeshPicked) {
                    return n[event_1.propertyKey](e);
                }
                if (((_a = e.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) === n) {
                    n[event_1.propertyKey](e);
                }
            });
            n.onDisposeObservable.addOnce(function () { return scene_3.onPointerObservable.remove(observer); });
        };
        for (var _y = 0, pointerEvents_1 = pointerEvents; _y < pointerEvents_1.length; _y++) {
            var event_1 = pointerEvents_1[_y];
            _loop_5(event_1);
        }
        // Check keyboard events
        var keyboardEvents = (_l = e.default._KeyboardValues) !== null && _l !== void 0 ? _l : [];
        var _loop_6 = function (event_2) {
            var observer = scene_3.onKeyboardObservable.add(function (e) {
                if (event_2.type && e.type !== event_2.type) {
                    return;
                }
                if (!event_2.keys.length) {
                    return n[event_2.propertyKey](e);
                }
                if (event_2.keys.indexOf(e.event.keyCode) !== -1 || event_2.keys.indexOf(e.event.key) !== -1) {
                    n[event_2.propertyKey](e);
                }
            });
            n.onDisposeObservable.addOnce(function () { return scene_3.onKeyboardObservable.remove(observer); });
        };
        for (var _z = 0, keyboardEvents_1 = keyboardEvents; _z < keyboardEvents_1.length; _z++) {
            var event_2 = keyboardEvents_1[_z];
            _loop_6(event_2);
        }
        // Check resize events
        var resizeEvents = (_m = e.default._ResizeValues) !== null && _m !== void 0 ? _m : [];
        var _loop_7 = function (event_3) {
            var observer = engine.onResizeObservable.add(function (e) {
                n[event_3.propertyKey](e.getRenderWidth(), e.getRenderHeight());
            });
            n.onDisposeObservable.addOnce(function () { return engine.onResizeObservable.remove(observer); });
        };
        for (var _0 = 0, resizeEvents_1 = resizeEvents; _0 < resizeEvents_1.length; _0++) {
            var event_3 = resizeEvents_1[_0];
            _loop_7(event_3);
        }
        // Retrieve impostors
        if (n instanceof abstractMesh_1.AbstractMesh && !n.physicsImpostor) {
            n.physicsImpostor = (_o = n._scene.getPhysicsEngine()) === null || _o === void 0 ? void 0 : _o.getImpostorForPhysicsObject(n);
        }
        delete n.metadata.script;
        // Tell the script it has is ready
        (_p = n.onInitialized) === null || _p === void 0 ? void 0 : _p.call(n);
    };
    // Configure initialized nodes
    for (var _r = 0, initializedNodes_1 = initializedNodes; _r < initializedNodes_1.length; _r++) {
        var i = initializedNodes_1[_r];
        _loop_1(i);
    }
    dummyScene.dispose();
}
/**
 * Works as an helper, this will:
 * = attach scripts on objects.
 * @param scene the scene to attach scripts, etc.
 */
function runScene(scene, rootUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var scriptsMap;
        return __generator(this, function (_a) {
            scriptsMap = require("./scripts-map").scriptsMap;
            // Attach scripts to objects in scene.
            attachScripts(scriptsMap, scene);
            // Configure post-processes
            configurePostProcesses(scene, rootUrl);
            // Rendering groups
            setupRenderingGroups(scene);
            // Pose matrices
            applyMeshesPoseMatrices(scene);
            // Bones parenting
            attachTransformNodesToBones(scene);
            // Apply colliders
            applyMeshColliders(scene);
            return [2 /*return*/];
        });
    });
}
exports.runScene = runScene;
/**
 * Attaches all available scripts on nodes of the given scene.
 * @param scene the scene reference that contains the nodes to attach scripts.
 */
function attachScripts(scriptsMap, scene) {
    requireScriptForNodes(scene, scriptsMap, scene.meshes);
    requireScriptForNodes(scene, scriptsMap, scene.lights);
    requireScriptForNodes(scene, scriptsMap, scene.cameras);
    requireScriptForNodes(scene, scriptsMap, scene.transformNodes);
    requireScriptForNodes(scene, scriptsMap, [scene]);
    var _loop_8 = function (scriptKey) {
        var script = scriptsMap[scriptKey];
        if (script.IsGraph && !script.IsGraphAttached) {
            var instance_1 = new script.default(scene);
            scene.executeWhenReady(function () { return instance_1["onStart"](); });
            scene.onBeforeRenderObservable.add(function () { return instance_1["onUpdate"](); });
        }
    };
    // Graphs
    for (var scriptKey in scriptsMap) {
        _loop_8(scriptKey);
    }
}
exports.attachScripts = attachScripts;
/**
 * Applies the waiting mesh colliders in case the scene is incremental.
 * @param scene defines the reference to the scene that contains the mesh colliders to apply.
 */
function applyMeshColliders(scene) {
    scene.meshes.forEach(function (m) {
        var _a;
        if (m instanceof mesh_1.Mesh && ((_a = m.metadata) === null || _a === void 0 ? void 0 : _a.collider)) {
            m._checkDelayState();
        }
    });
}
exports.applyMeshColliders = applyMeshColliders;
/**
 * Setups the rendering groups for meshes in the given scene.
 * @param scene defines the scene containing the meshes to configure their rendering group Ids.
 */
function setupRenderingGroups(scene) {
    scene.meshes.forEach(function (m) {
        var _a;
        if (!m.metadata || !(m instanceof mesh_1.Mesh)) {
            return;
        }
        m.renderingGroupId = (_a = m.metadata.renderingGroupId) !== null && _a !== void 0 ? _a : m.renderingGroupId;
    });
}
exports.setupRenderingGroups = setupRenderingGroups;
/**
 * Meshes using pose matrices with skeletons can't be parsed directly as the pose matrix is
 * missing from the serialzied data of meshes. These matrices are stored in the meshes metadata
 * instead and can be applied by calling this function.
 * @param scene defines the scene containing the meshes to configure their pose matrix.
 */
function applyMeshesPoseMatrices(scene) {
    scene.meshes.forEach(function (m) {
        var _a;
        if (m.skeleton && ((_a = m.metadata) === null || _a === void 0 ? void 0 : _a.basePoseMatrix)) {
            m.updatePoseMatrix(math_vector_1.Matrix.FromArray(m.metadata.basePoseMatrix));
            delete m.metadata.basePoseMatrix;
        }
    });
}
exports.applyMeshesPoseMatrices = applyMeshesPoseMatrices;
/**
 * Checks scene's transform nodes in order to attach to related bones.
 * @param scene defines the reference to the scene containing the transform nodes to potentially attach to bones.
 */
function attachTransformNodesToBones(scene) {
    var apply = function (tn) {
        var _a;
        if (!((_a = tn.metadata) === null || _a === void 0 ? void 0 : _a.parentBoneId)) {
            return;
        }
        var bone = scene.getBoneByID(tn.metadata.parentBoneId);
        if (!bone) {
            return;
        }
        var skeleton = bone.getSkeleton();
        var mesh = scene.meshes.find(function (m) { return m.skeleton === skeleton; });
        if (mesh) {
            tn.attachToBone(bone, mesh);
        }
        delete tn.metadata.parentBoneId;
    };
    scene.meshes.forEach(function (m) { return apply(m); });
    scene.transformNodes.forEach(function (tn) { return apply(tn); });
}
exports.attachTransformNodesToBones = attachTransformNodesToBones;
/**
 * Attaches the a script at runtime to the given node according to the given script's path.
 * @param scriptPath defines the path to the script to attach (available as a key in the exported "scriptsMap" map).
 * @param object defines the reference to the object (node or scene) to attach the script to.
 */
function attachScriptToNodeAtRuntime(scriptPath, object) {
    var _a, _b;
    var scriptsMap = require("./scripts-map").scriptsMap;
    object.metadata = (_a = object.metadata) !== null && _a !== void 0 ? _a : {};
    object.metadata.script = (_b = object.metadata.script) !== null && _b !== void 0 ? _b : {};
    object.metadata.script.name = scriptPath;
    requireScriptForNodes(object instanceof scene_1.Scene ? object : object.getScene(), scriptsMap, [object]);
    return object;
}
exports.attachScriptToNodeAtRuntime = attachScriptToNodeAtRuntime;
/**
 * Defines the reference to the SSAO2 rendering pipeline.
 */
exports.ssao2RenderingPipelineRef = null;
/**
 * Defines the reference to the SSR post-process.
 */
exports.screenSpaceReflectionPostProcessRef = null;
/**
 * Defines the reference to the default rendering pipeline.
 */
exports.defaultRenderingPipelineRef = null;
/**
 * Defines the reference to the motion blur post-process.
 */
exports.motionBlurPostProcessRef = null;
/**
 * Configures and attaches the post-processes of the given scene.
 * @param scene the scene where to create the post-processes and attach to its cameras.
 * @param rootUrl the root Url where to find extra assets used by pipelines. Should be the same as the scene.
 */
function configurePostProcesses(scene, rootUrl) {
    var _a, _b, _c;
    if (rootUrl === void 0) { rootUrl = null; }
    if (rootUrl === null || !((_a = scene.metadata) === null || _a === void 0 ? void 0 : _a.postProcesses)) {
        return;
    }
    // Load  post-processes configuration
    var data = scene.metadata.postProcesses;
    if (data.ssao && !exports.ssao2RenderingPipelineRef) {
        exports.ssao2RenderingPipelineRef = ssao2RenderingPipeline_1.SSAO2RenderingPipeline.Parse(data.ssao.json, scene, rootUrl);
        if (data.ssao.enabled) {
            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(exports.ssao2RenderingPipelineRef.name, scene.cameras);
        }
    }
    if (((_b = data.screenSpaceReflections) === null || _b === void 0 ? void 0 : _b.json) && !exports.screenSpaceReflectionPostProcessRef) {
        // screenSpaceReflectionPostProcessRef = ScreenSpaceReflectionPostProcess._Parse(data.screenSpaceReflections.json, scene.activeCamera!, scene, "");
        exports.screenSpaceReflectionPostProcessRef = new screenSpaceReflectionPostProcess_1.ScreenSpaceReflectionPostProcess("ssr", scene, 1.0, scene.activeCamera);
        exports.screenSpaceReflectionPostProcessRef.step = data.screenSpaceReflections.json.step;
        exports.screenSpaceReflectionPostProcessRef.strength = data.screenSpaceReflections.json.strength;
        exports.screenSpaceReflectionPostProcessRef.threshold = data.screenSpaceReflections.json.threshold;
        exports.screenSpaceReflectionPostProcessRef.smoothSteps = data.screenSpaceReflections.json.smoothSteps;
        exports.screenSpaceReflectionPostProcessRef.roughnessFactor = data.screenSpaceReflections.json.roughnessFactor;
        exports.screenSpaceReflectionPostProcessRef.reflectionSamples = data.screenSpaceReflections.json.reflectionSamples;
        exports.screenSpaceReflectionPostProcessRef.enableSmoothReflections = data.screenSpaceReflections.json.enableSmoothReflections;
    }
    if (data.default && !exports.defaultRenderingPipelineRef) {
        exports.defaultRenderingPipelineRef = new defaultRenderingPipeline_1.DefaultRenderingPipeline(data.default.json.name, true, scene);
        exports.defaultRenderingPipelineRef.fxaaEnabled = data.default.json.fxaa.enabled;
        // Image processing
        exports.defaultRenderingPipelineRef.imageProcessingEnabled = data.default.json.imageProcessing.enabled;
        exports.defaultRenderingPipelineRef.imageProcessing.exposure = data.default.json.imageProcessing.exposure;
        exports.defaultRenderingPipelineRef.imageProcessing.contrast = data.default.json.imageProcessing.contrast;
        exports.defaultRenderingPipelineRef.imageProcessing.fromLinearSpace = data.default.json.imageProcessing.fromLinearSpace;
        exports.defaultRenderingPipelineRef.imageProcessing.toneMappingEnabled = data.default.json.imageProcessing.toneMappingEnabled;
        // Vignette
        exports.defaultRenderingPipelineRef.imageProcessing.vignetteEnabled = data.default.json.vignette.enabled;
        exports.defaultRenderingPipelineRef.imageProcessing.vignetteWeight = data.default.json.vignette.vignetteWeight;
        exports.defaultRenderingPipelineRef.imageProcessing.vignetteBlendMode = data.default.json.vignette.vignetteBlendMode;
        exports.defaultRenderingPipelineRef.imageProcessing.vignetteColor = math_color_1.Color4.FromArray(data.default.json.vignette.vignetteColor);
        // Sharpen
        exports.defaultRenderingPipelineRef.sharpenEnabled = data.default.json.sharpen.enabled;
        exports.defaultRenderingPipelineRef.sharpen.edgeAmount = data.default.json.sharpen.edgeAmount;
        exports.defaultRenderingPipelineRef.sharpen.colorAmount = data.default.json.sharpen.colorAmount;
        // Bloom
        exports.defaultRenderingPipelineRef.bloomEnabled = data.default.json.bloom.enabled;
        exports.defaultRenderingPipelineRef.bloomScale = data.default.json.bloom.bloomScale;
        exports.defaultRenderingPipelineRef.bloomWeight = data.default.json.bloom.bloomWeight;
        exports.defaultRenderingPipelineRef.bloomKernel = data.default.json.bloom.bloomKernel;
        exports.defaultRenderingPipelineRef.bloomThreshold = data.default.json.bloom.bloomThreshold;
        // Depth of field
        exports.defaultRenderingPipelineRef.depthOfFieldEnabled = data.default.json.depthOfField.enabled;
        exports.defaultRenderingPipelineRef.depthOfField.fStop = data.default.json.depthOfField.fStop;
        exports.defaultRenderingPipelineRef.depthOfField.focalLength = data.default.json.depthOfField.focalLength;
        exports.defaultRenderingPipelineRef.depthOfField.focusDistance = data.default.json.depthOfField.focusDistance;
        exports.defaultRenderingPipelineRef.depthOfFieldBlurLevel = data.default.json.depthOfField.depthOfFieldBlurLevel;
        // Chromatic aberration
        exports.defaultRenderingPipelineRef.chromaticAberrationEnabled = data.default.json.chromaticAberration.enabled;
        exports.defaultRenderingPipelineRef.chromaticAberration.aberrationAmount = data.default.json.chromaticAberration.aberrationAmount;
        exports.defaultRenderingPipelineRef.chromaticAberration.radialIntensity = data.default.json.chromaticAberration.radialIntensity;
        exports.defaultRenderingPipelineRef.chromaticAberration.direction = math_vector_1.Vector2.FromArray(data.default.json.chromaticAberration.direction);
        exports.defaultRenderingPipelineRef.chromaticAberration.centerPosition = math_vector_1.Vector2.FromArray(data.default.json.chromaticAberration.centerPosition);
        // Grain
        exports.defaultRenderingPipelineRef.grainEnabled = data.default.json.grain.enabled;
        exports.defaultRenderingPipelineRef.grain.animated = data.default.json.grain.animated;
        exports.defaultRenderingPipelineRef.grain.intensity = data.default.json.grain.intensity;
        // Glow
        exports.defaultRenderingPipelineRef.glowLayerEnabled = data.default.json.glowLayer.enabled;
        if (exports.defaultRenderingPipelineRef.glowLayer) {
            exports.defaultRenderingPipelineRef.glowLayer.intensity = data.default.json.glowLayer.intensity;
            exports.defaultRenderingPipelineRef.glowLayer.blurKernelSize = data.default.json.glowLayer.blurKernelSize;
        }
        if (!data.default.enabled) {
            scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(exports.defaultRenderingPipelineRef.name, scene.cameras);
        }
    }
    if ((_c = data.motionBlur) === null || _c === void 0 ? void 0 : _c.json) {
        // motionBlurPostProcessRef = MotionBlurPostProcess._Parse(data.motionBlur.json, scene.activeCamera!, scene, "");
        exports.motionBlurPostProcessRef = new motionBlurPostProcess_1.MotionBlurPostProcess(data.motionBlur.json.name, scene, 1.0, scene.activeCamera);
        exports.motionBlurPostProcessRef.isObjectBased = data.motionBlur.json.isObjectBased;
        exports.motionBlurPostProcessRef.motionStrength = data.motionBlur.json.motionStrength;
        exports.motionBlurPostProcessRef.motionBlurSamples = data.motionBlur.json.motionBlurSamples;
    }
    scene.onDisposeObservable.addOnce(function () {
        exports.ssao2RenderingPipelineRef = null;
        exports.screenSpaceReflectionPostProcessRef = null;
        exports.defaultRenderingPipelineRef = null;
        exports.motionBlurPostProcessRef = null;
    });
}
exports.configurePostProcesses = configurePostProcesses;
/**
 * Overrides the texture parser.
 */
(function overrideTextureParser() {
    var textureParser = decorators_1.SerializationHelper._TextureParser;
    decorators_1.SerializationHelper._TextureParser = function (sourceProperty, scene, rootUrl) {
        var _a;
        if (sourceProperty.isCube && !sourceProperty.isRenderTarget && sourceProperty.files && ((_a = sourceProperty.metadata) === null || _a === void 0 ? void 0 : _a.isPureCube)) {
            sourceProperty.files.forEach(function (f, index) {
                sourceProperty.files[index] = rootUrl + f;
            });
        }
        var texture = textureParser.call(decorators_1.SerializationHelper, sourceProperty, scene, rootUrl);
        if (sourceProperty.url) {
            texture.url = rootUrl + sourceProperty.url;
        }
        return texture;
    };
})();
//# sourceMappingURL=tools.js.map